
static const char *scheduler_lua =
"local __getthread,__runthread,__yield\n"
"local __schedule,__requeue,__suspend,__wakeup,__getsuspended,yield\n"
"__getthread,__runthread,__yield = ...\n"
"local function newParker()\n"
"local Parker = {}\n"
"Parker.i = 0\n"
"Parker.l = 0\n"
"Parker.t = {}\n"
"function Parker.park(obj)\n"
"local i = 0\n"
"while 1 do\n"
"if Parker.i < Parker.l then\n"
"i = Parker.i\n"
"Parker.i = Parker.i + 1\n"
"if not Parker.t[i] then\n"
"Parker.t[i] = obj\n"
"return i\n"
"end\n"
"else\n"
"i = Parker.i\n"
"Parker.i = Parker.i + 1\n"
"Parker.l = Parker.l + 1\n"
"Parker.t[i] = obj\n"
"return i\n"
"end\n"
"end\n"
"end\n"
"function Parker.wake(i)\n"
"if Parker.i>i then Parker.i=i end\n"
"local obj = Parker.t[i]\n"
"Parker.t[i] = nil\n"
"return obj\n"
"end\n"
"return Parker\n"
"end\n"
"local function newQueue()\n"
"local Queue = {}\n"
"Queue.active = {}\n"
"Queue.passive = {}\n"
"Queue.psize = 0\n"
"Queue.asize = 0\n"
"Queue.apos  = 0\n"
"function Queue.offer(obj)\n"
"Queue.passive[Queue.psize] = obj\n"
"Queue.psize = Queue.psize + 1\n"
"end\n"
"function Queue.flip()\n"
"if not ( Queue.apos < Queue.asize ) then\n"
"Queue.apos = 0\n"
"Queue.asize = Queue.psize\n"
"Queue.psize = 0\n"
"Queue.active, Queue.passive = Queue.passive, Queue.active\n"
"end\n"
"end\n"
"function Queue.take()\n"
"Queue.flip()\n"
"if Queue.asize==0 then return nil end\n"
"local obj = Queue.active[Queue.apos]\n"
"Queue.active[Queue.apos] = nil\n"
"Queue.apos = Queue.apos + 1\n"
"return obj\n"
"end\n"
"return Queue\n"
"end\n"
"local Scheduler = {}\n"
"Scheduler.parked = newParker()\n"
"Scheduler.queue  = newQueue()\n"
"function __schedule()\n"
"local thr = Scheduler.queue.take()\n"
"if thr then\n"
"__runthread(thr)\n"
"end\n"
"return thr\n"
"end\n"
"function __requeue()\n"
"local thr = __getthread()\n"
"Scheduler.queue.offer(thr)\n"
"end\n"
"function __suspend()\n"
"local thr = __getthread()\n"
"return Scheduler.parked.park(thr)\n"
"end\n"
"function __wakeup(i)\n"
"local thr = Scheduler.parked.wake(i)\n"
"if not (thr==nil) then\n"
"Scheduler.queue.offer(thr)\n"
"end\n"
"end\n"
"function __getsuspended(i)\n"
"local thr = Scheduler.parked.wake(i)\n"
"return thr\n"
"end\n"
"function yield()\n"
"__requeue();\n"
"__yield()\n"
"end\n"
"_G.__requeue=__requeue\n"
"_G.__suspend=__suspend\n"
"_G.__wakeup=__wakeup\n"
"_G.__yield=__yield\n"
"_G.yield=yield\n"
"return __schedule,__requeue,__suspend,__wakeup,__getsuspended,yield\n"
;
